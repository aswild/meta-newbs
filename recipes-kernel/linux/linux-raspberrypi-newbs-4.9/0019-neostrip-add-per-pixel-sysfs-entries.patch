From 14555a17b3096e6b9a8498b660d7e5498a101abc Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Fri, 24 Mar 2017 00:06:03 -0400
Subject: [PATCH 19/20] neostrip: add per-pixel sysfs entries

Plus:
 * use attribute_group stuff to create the static attributes
 * add comments for vim folding
---
 drivers/spi/neostrip.c | 149 +++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 125 insertions(+), 24 deletions(-)

diff --git a/drivers/spi/neostrip.c b/drivers/spi/neostrip.c
index 30fa7a1..ab59c3d 100644
--- a/drivers/spi/neostrip.c
+++ b/drivers/spi/neostrip.c
@@ -38,11 +38,17 @@
 // and 3 bytes of color data per pixel
 #define NEOSTRIP_SPIBUF_LENGTH(__strip_len) ((__strip_len) * 9)
 
+struct neostrip_pixel_attr {
+    struct device_attribute dev_attr;
+    int                     index;
+};
+
 struct neostrip_chip {
     dev_t               devt;
     struct device       *dev;
     struct spi_device   *spi;
     struct list_head    device_entry;
+    struct neostrip_pixel_attr *pixel_attrs;
 
     int                 in_use;
     struct mutex        in_use_lock;
@@ -67,8 +73,7 @@ static DEFINE_MUTEX(device_list_lock);
 static int              neostrip_major; // dynamically allocated major number
 static struct class     *neostrip_class;
 
-
-// Internal Core Functions
+// Internal Core Functions {{{
 
 // Expand a nibble of val (upper or lower) from 00000000abcd to 1a01b01c01d0
 // Magic multiplication and masking from
@@ -231,18 +236,61 @@ static ssize_t neostrip_pixels_str(struct neostrip_chip *chip, char *buf, ssize_
 
     for (i = 0; i < chip->strip_len; i++)
     {
-        count += scnprintf(buf + count, buf_len, "0x%06x%s",
+        count += scnprintf(buf + count, buf_len, "%06x%s",
                            chip->pixels[i], (i != chip->strip_len - 1) ? " " : "\n");
     }
 
     return count;
 }
 
-// sysfs functions
+// }}}
 
-static ssize_t neostrip_sysfs_show_color(struct device *dev,
-                                           struct device_attribute *attr,
-                                           char *buf)
+// sysfs functions {{{
+
+static ssize_t neostrip_sysfs_pixel_show(struct device *dev,
+                                         struct device_attribute *attr,
+                                         char *buf)
+{
+    struct neostrip_chip        *chip = dev_get_drvdata(dev);
+    struct neostrip_pixel_attr  *pixel_attr;
+    ssize_t                     count = 0;
+    int                         index;
+
+    mutex_lock(&chip->lock);
+    pixel_attr = container_of(attr, struct neostrip_pixel_attr, dev_attr);
+    index = pixel_attr->index;
+    count = scnprintf(buf, PAGE_SIZE, "%06x\n", chip->pixels[index]);
+    mutex_unlock(&chip->lock);
+
+    return count;
+}
+
+static ssize_t neostrip_sysfs_pixel_store(struct device *dev,
+                                          struct device_attribute *attr,
+                                          const char *buf, size_t count)
+{
+    struct neostrip_chip        *chip = dev_get_drvdata(dev);
+    struct neostrip_pixel_attr  *pixel_attr;
+    int                         index, err;
+    u32                         val;
+
+    mutex_lock(&chip->lock);
+    pixel_attr = container_of(attr, struct neostrip_pixel_attr, dev_attr);
+    index = pixel_attr->index;
+    err = kstrtou32(buf, 16, &val);
+    if (!err)
+    {
+        chip->pixels[index] = val;
+        err = neostrip_write(chip);
+    }
+    mutex_unlock(&chip->lock);
+
+    return err ? err : count;
+}
+
+static ssize_t neostrip_sysfs_pixels_show(struct device *dev,
+                                          struct device_attribute *attr,
+                                          char *buf)
 {
     struct neostrip_chip    *chip = dev_get_drvdata(dev);
     ssize_t                 count = 0;
@@ -254,9 +302,9 @@ static ssize_t neostrip_sysfs_show_color(struct device *dev,
     return count;
 }
 
-static ssize_t neostrip_sysfs_set_color(struct device *dev,
-                                          struct device_attribute *attr,
-                                          const char *buf, size_t count)
+static ssize_t neostrip_sysfs_pixels_store(struct device *dev,
+                                           struct device_attribute *attr,
+                                           const char *buf, size_t count)
 {
     struct neostrip_chip *chip = dev_get_drvdata(dev);
     int err;
@@ -267,14 +315,24 @@ static ssize_t neostrip_sysfs_set_color(struct device *dev,
 
     return err ? err : count;
 }
-static DEVICE_ATTR(color, 0644, neostrip_sysfs_show_color, neostrip_sysfs_set_color);
+static DEVICE_ATTR(pixels, 0644, neostrip_sysfs_pixels_show, neostrip_sysfs_pixels_store);
 
 // Array of sysfs attributes to be automatically created/removed
-static const struct device_attribute *neostrip_sysfs_attrs[] = {
-    &dev_attr_color,
+static struct attribute *neostrip_sysfs_attrs[] = {
+    &dev_attr_pixels.attr,
+    NULL,
 };
+static struct attribute_group neostrip_sysfs_attr_group = {
+    .attrs = neostrip_sysfs_attrs,
+};
+static const struct attribute_group *neostrip_sysfs_attr_groups[] = {
+    &neostrip_sysfs_attr_group,
+    NULL,
+};
+
+// }}}
 
-// device node
+// {{{ device node functions
 
 static int neostrip_cdev_open(struct inode *inode, struct file *fp)
 {
@@ -388,6 +446,9 @@ static ssize_t neostrip_cdev_write(struct file *fp, const char *buf, size_t size
     return (ret < 0) ? ret : size;
 }
 
+// }}}
+
+// ioctl {{{
 long neostrip_cdev_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 {
     struct neostrip_chip    *chip;
@@ -424,6 +485,7 @@ long neostrip_cdev_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
     }
     return ret;
 }
+// }}}
 
 static struct file_operations neostrip_cdev_fops = {
     .open           = neostrip_cdev_open,
@@ -536,14 +598,39 @@ static int neostrip_probe(struct spi_device *spi)
 
     mutex_unlock(&device_list_lock);
 
-    // create sysfs files
-    for (sysfs_i = 0; sysfs_i < sizeof(neostrip_sysfs_attrs)/sizeof(neostrip_sysfs_attrs[0]); sysfs_i++)
+    // create per-pixel sysfs files
+    // note: technically this creates a sort of race condition with userspace,
+    // but it's dynamic so whatever
+    chip->pixel_attrs = kzalloc(sizeof(*chip->pixel_attrs) * chip->strip_len, GFP_KERNEL);
+    if (!chip->pixel_attrs)
+    {
+        dev_err(chip->dev, "couldn't get memory for pixel_attrs\n");
+        ret = -ENOMEM;
+        goto fail_device_destroy;
+    }
+
+    for (sysfs_i = 0; sysfs_i < chip->strip_len; sysfs_i++)
     {
-        ret = device_create_file(chip->dev, neostrip_sysfs_attrs[sysfs_i]);
+        char nametmp[8];
+        char *name;
+        snprintf(nametmp, sizeof(nametmp), "%d", sysfs_i);
+        name = kstrdup(nametmp, GFP_KERNEL);
+        if (!name)
+        {
+            ret = -ENOMEM;
+            goto fail_destroy_sysfs;
+        }
+
+        chip->pixel_attrs[sysfs_i].index = sysfs_i;
+        chip->pixel_attrs[sysfs_i].dev_attr.attr.name = name;
+        chip->pixel_attrs[sysfs_i].dev_attr.attr.mode = VERIFY_OCTAL_PERMISSIONS(0644);
+        chip->pixel_attrs[sysfs_i].dev_attr.show = neostrip_sysfs_pixel_show;
+        chip->pixel_attrs[sysfs_i].dev_attr.store = neostrip_sysfs_pixel_store;
+
+        ret = device_create_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
         if (ret)
         {
-            dev_err(chip->dev, "Failed to create sysfs file %s\n", neostrip_sysfs_attrs[sysfs_i]->attr.name);
-            ret = -EFAULT;
+            dev_err(chip->dev, "Failed to create sysfs file %s\n", chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
             goto fail_destroy_sysfs;
         }
     }
@@ -564,10 +651,18 @@ static int neostrip_probe(struct spi_device *spi)
     return 0;
 
 fail_destroy_sysfs:
+    if (sysfs_i < chip->strip_len && chip->pixel_attrs[sysfs_i].dev_attr.attr.name)
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+
     for (sysfs_i--; sysfs_i >= 0; sysfs_i--)
-        device_remove_file(chip->dev, neostrip_sysfs_attrs[sysfs_i]);
+    {
+        device_remove_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+    }
+
+    kfree(chip->pixel_attrs);
 
-//fail_device_destroy:
+fail_device_destroy:
     mutex_lock(&device_list_lock);
     list_del(&chip->device_entry);
     device_destroy(neostrip_class, chip->devt);
@@ -592,10 +687,14 @@ static int neostrip_probe(struct spi_device *spi)
 static int neostrip_remove(struct spi_device *spi)
 {
     struct neostrip_chip *chip = spi_get_drvdata(spi);
-    int i;
+    int sysfs_i;
 
-    for (i = 0; i < sizeof(neostrip_sysfs_attrs)/sizeof(neostrip_sysfs_attrs[0]); i++)
-        device_remove_file(chip->dev, neostrip_sysfs_attrs[i]);
+    for (sysfs_i = chip->strip_len-1; sysfs_i >= 0; sysfs_i--)
+    {
+        device_remove_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+    }
+    kfree(chip->pixel_attrs);
 
     mutex_lock(&chip->lock);
     chip->spi = NULL;
@@ -645,6 +744,8 @@ static int __init neostrip_init(void)
         goto fail_unregister;
     }
 
+    neostrip_class->dev_groups = neostrip_sysfs_attr_groups;
+
     // register the SPI protocol driver
     ret = spi_register_driver(&neostrip_spi_driver);
     if (ret < 0)
-- 
2.9.3

