From 0ab42a053fcd9e4e7c90932eebe023f67ac78864 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Mon, 4 Sep 2017 01:00:42 -0400
Subject: [PATCH 5/5] fs: proc: add exversion.gz for extended version info

---
 fs/proc/.gitignore  |  6 +++++
 fs/proc/Kconfig     | 36 +++++++++++++++++++++++++
 fs/proc/Makefile    | 33 +++++++++++++++++++++++
 fs/proc/exversion.c | 75 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 150 insertions(+)
 create mode 100644 fs/proc/.gitignore
 create mode 100644 fs/proc/exversion.c

diff --git a/fs/proc/.gitignore b/fs/proc/.gitignore
new file mode 100644
index 000000000000..ecc4b3b697bb
--- /dev/null
+++ b/fs/proc/.gitignore
@@ -0,0 +1,6 @@
+#
+# Generated files
+#
+exversion_data
+exversion_data.gz
+exversion_data.h
diff --git a/fs/proc/Kconfig b/fs/proc/Kconfig
index 1ade1206bb89..02045c287d41 100644
--- a/fs/proc/Kconfig
+++ b/fs/proc/Kconfig
@@ -81,3 +81,39 @@ config PROC_CHILDREN
 
 	  Say Y if you are running any user-space software which takes benefit from
 	  this interface. For example, rkt is such a piece of software.
+
+config PROC_EXVERSION
+	tristate "Include extended version information in /proc/exversion.gz"
+	default n
+	select BUILD_BIN2C
+	help
+	  Provides /proc/exversion.gz containing arbitrary extended version information
+
+if PROC_EXVERSION
+
+choice
+	prompt "Exversion data source"
+	default PROC_EXVERSION_USE_STR
+	help
+	  Select whether to provide the extended version information through a string
+	  (set with PROC_EXVERSION_STR) or from an existing file (set with PROC_EXVERION_FILE)
+
+config PROC_EXVERSION_USE_STR
+	bool "Use exversion data from a Kconfig string"
+	help
+	  Use the value of PROC_EXVERSION_STR
+
+config PROC_EXVERSION_USE_FILE
+	bool "Use exversion data from an existing file"
+	help
+	  Read exversion data from PROC_EXVERSION_FILE
+
+endchoice
+
+config PROC_EXVERSION_STR
+	string "exversion data string" if PROC_EXVERSION_USE_STR
+
+config PROC_EXVERSION_FILE
+	string "exversion data file" if PROC_EXVERSION_USE_FILE
+
+endif
diff --git a/fs/proc/Makefile b/fs/proc/Makefile
index 12c6922c913c..43a3cae44b8d 100644
--- a/fs/proc/Makefile
+++ b/fs/proc/Makefile
@@ -31,3 +31,36 @@ proc-$(CONFIG_PROC_KCORE)	+= kcore.o
 proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PRINTK)	+= kmsg.o
 proc-$(CONFIG_PROC_PAGE_MONITOR)	+= page.o
+proc-$(CONFIG_PROC_EXVERSION)	+= exversion.o
+
+$(obj)/exversion.o: $(obj)/exversion_data.h
+
+ifdef CONFIG_PROC_EXVERSION
+ifeq ($(CONFIG_PROC_EXVERSION_USE_STR),y)
+exversion_data_file = $(obj)/exversion_data
+EXTRA_CLEAN += $(exversion_data_file)
+targets += exversion_data
+filechk_exversion_data = (echo $(CONFIG_PROC_EXVERSION_STR))
+$(exversion_data_file): /dev/null FORCE
+	$(call filechk,exversion_data)
+
+else
+ifeq ($(CONFIG_PROC_EXVERSION_USE_FILE),y)
+ifneq ($(CONFIG_PROC_EXVERSION_FILE),"")
+# use a shell echo to strip quotes from the filename
+exversion_data_file = $(shell echo $(CONFIG_PROC_EXVERSION_FILE))
+else
+$(error CONFIG_PROC_EXVERSION_FILE must not be empty when CONFIG_PROC_EXVERSION_USE_FILE is set)
+endif
+endif
+endif
+
+targets += exversion_data.gz
+$(obj)/exversion_data.gz: $(exversion_data_file) FORCE
+	$(call if_changed,gzip)
+
+filechk_exversiongz = (echo "static const char exversion_data[] __used = "; cat $< | scripts/basic/bin2c; echo ";")
+targets += exversion_data.h
+$(obj)/exversion_data.h: $(obj)/exversion_data.gz FORCE
+	$(call filechk,exversiongz)
+endif # CONFIGPROC_EXVERSION
diff --git a/fs/proc/exversion.c b/fs/proc/exversion.c
new file mode 100644
index 000000000000..a91cf4d82365
--- /dev/null
+++ b/fs/proc/exversion.c
@@ -0,0 +1,75 @@
+/*
+ * fs/proc/exversion.c
+ * Creates /proc/exversion.gz, which contains arbitrary extended version information
+ * The exvesion data is either a string set through CONFIG_PROC_EXVERSION_STR,
+ * or a file set through CONFIG_PROC_EXVERSION_FILE
+ *
+ * Implementation is based on kernel/configs.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or (at
+ * your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
+ * NON INFRINGEMENT.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/init.h>
+#include <linux/uaccess.h>
+
+#include "exversion_data.h"
+
+#define exversion_data_size (sizeof(exversion_data) - 1)
+
+static ssize_t exversion_read(struct file *file, char __user *buf,
+			      size_t len, loff_t * offset)
+{
+	return simple_read_from_buffer(buf, len, offset,
+				       exversion_data,
+				       exversion_data_size);
+}
+
+static const struct file_operations exversion_file_ops = {
+	.owner = THIS_MODULE,
+	.read = exversion_read,
+	.llseek = default_llseek,
+};
+
+static int __init exversion_init(void)
+{
+	struct proc_dir_entry *entry;
+
+	/* create the current config file */
+	entry = proc_create("exversion.gz", S_IFREG | S_IRUGO, NULL,
+			    &exversion_file_ops);
+	if (!entry)
+		return -ENOMEM;
+
+	proc_set_size(entry, exversion_data_size);
+
+	return 0;
+}
+
+static void __exit exversion_exit(void)
+{
+	remove_proc_entry("exversion.gz", NULL);
+}
+
+module_init(exversion_init);
+module_exit(exversion_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Allen Wild");
+MODULE_DESCRIPTION("Echo extended version information built with the kernel");
-- 
2.14.2

