From 78cae23e088ee2d163fe8917ca3f40947dac96e5 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Thu, 23 Mar 2017 21:56:26 -0400
Subject: [PATCH 16/19] neostrip: refactor colors -> pixels

---
 drivers/spi/neostrip.c | 55 +++++++++++++++++++++++-------------------
 1 file changed, 30 insertions(+), 25 deletions(-)

diff --git a/drivers/spi/neostrip.c b/drivers/spi/neostrip.c
index 60a0c0532a46..30fa7a1df359 100644
--- a/drivers/spi/neostrip.c
+++ b/drivers/spi/neostrip.c
@@ -48,7 +48,7 @@ struct neostrip_chip {
     struct mutex        in_use_lock;
 
     struct mutex        lock;
-    u32                 *colors;    // 24-bit 0xRRGGBB value
+    u32                 *pixels;    // 24-bit 0xRRGGBB value
     int                 strip_len;
 
 #ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
@@ -135,9 +135,9 @@ static int neostrip_write(struct neostrip_chip *chip)
         // a little extra low time doesn't hurt). Therefore mask out that bit and
         // don't allow it to be set.
         //   1 x 0 1 x 0 1 x  |  0 1 x 0 1 x 0 1  |  X 0 1 x 0 1 x 0
-        chip->colors[i] &= 0xfbfbfb;
+        chip->pixels[i] &= 0xfbfbfb;
 
-        neostrip_expand_color(&buf[i*9], chip->colors[i]);
+        neostrip_expand_color(&buf[i*9], chip->pixels[i]);
     }
 
     //print_hex_dump(KERN_INFO, "neostrip buf: ", DUMP_PREFIX_OFFSET, 16, 1, buf, sizeof(buf), 0);
@@ -159,7 +159,12 @@ static int neostrip_write(struct neostrip_chip *chip)
     return ret;
 }
 
-static int neostrip_set_color_from_str(struct neostrip_chip *chip, const char *strbuf)
+static inline void neostrip_clear_strip(struct neostrip_chip *chip)
+{
+    memset(chip->pixels, 0, chip->strip_len * sizeof(*chip->pixels));
+}
+
+static int neostrip_set_pixels_from_str(struct neostrip_chip *chip, const char *strbuf)
 {
     int             ret;
     int             count = 0;
@@ -167,7 +172,7 @@ static int neostrip_set_color_from_str(struct neostrip_chip *chip, const char *s
     if (!strncmp(strbuf, "clear", 5))
     {
         // if the input is "clear" zero out the strip
-        memset(chip->colors, 0, chip->strip_len * sizeof(*chip->colors));
+        neostrip_clear_strip(chip);
     }
     else if (!strncmp(strbuf, "refresh", 7))
     {
@@ -177,15 +182,15 @@ static int neostrip_set_color_from_str(struct neostrip_chip *chip, const char *s
     else
     {
         char *str, *word;
-        u32  *colors;
+        u32  *pixels;
 
         // duplicate the string since strsep mangles it
         str = kstrdup(strbuf, GFP_KERNEL);
         if (!str)
             return -ENOMEM;
 
-        colors = kmalloc(sizeof(*colors) * chip->strip_len, GFP_KERNEL);
-        if (!colors)
+        pixels = kmalloc(sizeof(*pixels) * chip->strip_len, GFP_KERNEL);
+        if (!pixels)
         {
             kfree(str);
             return -ENOMEM;
@@ -197,29 +202,29 @@ static int neostrip_set_color_from_str(struct neostrip_chip *chip, const char *s
             if (word[0] == '\0')
                 continue; // ignore multiple delimiters
 
-            ret = kstrtou32(word, 16, &colors[count]);
+            ret = kstrtou32(word, 16, &pixels[count]);
             if (ret)
             {
                 kfree(str);
-                kfree(colors);
+                kfree(pixels);
                 return -EINVAL;
             }
-            pr_debug("set colors[%d] to 0x%06x\n", count, colors[count]);
+            pr_debug("set pixels[%d] to 0x%06x\n", count, pixels[count]);
             count++;
         }
 
         dev_dbg(chip->dev, "set color from string '%s'\n", strbuf);
-        dev_dbg(chip->dev, "got %d colors. will copy %u bytes\n", count, count * sizeof(*colors));
+        dev_dbg(chip->dev, "got %d pixels. will copy %u bytes\n", count, count * sizeof(*pixels));
 
         // only update the values we read in
         if (count)
-            memcpy(chip->colors, colors, count * sizeof(*colors));
+            memcpy(chip->pixels, pixels, count * sizeof(*pixels));
     }
 
     return neostrip_write(chip);
 }
 
-static ssize_t neostrip_colors_str(struct neostrip_chip *chip, char *buf, ssize_t buf_len)
+static ssize_t neostrip_pixels_str(struct neostrip_chip *chip, char *buf, ssize_t buf_len)
 {
     int i;
     ssize_t count = 0;
@@ -227,7 +232,7 @@ static ssize_t neostrip_colors_str(struct neostrip_chip *chip, char *buf, ssize_
     for (i = 0; i < chip->strip_len; i++)
     {
         count += scnprintf(buf + count, buf_len, "0x%06x%s",
-                           chip->colors[i], (i != chip->strip_len - 1) ? " " : "\n");
+                           chip->pixels[i], (i != chip->strip_len - 1) ? " " : "\n");
     }
 
     return count;
@@ -243,7 +248,7 @@ static ssize_t neostrip_sysfs_show_color(struct device *dev,
     ssize_t                 count = 0;
 
     mutex_lock(&chip->lock);
-    count = neostrip_colors_str(chip, buf, 4096);
+    count = neostrip_pixels_str(chip, buf, 4096);
     mutex_unlock(&chip->lock);
 
     return count;
@@ -257,7 +262,7 @@ static ssize_t neostrip_sysfs_set_color(struct device *dev,
     int err;
 
     mutex_lock(&chip->lock);
-    err = neostrip_set_color_from_str(chip, buf);
+    err = neostrip_set_pixels_from_str(chip, buf);
     mutex_unlock(&chip->lock);
 
     return err ? err : count;
@@ -336,7 +341,7 @@ static ssize_t neostrip_cdev_read(struct file *fp, char *buf, size_t count, loff
         return -ENOMEM;
 
     mutex_lock(&chip->lock);
-    len = neostrip_colors_str(chip, tbuf, tbuf_len);
+    len = neostrip_pixels_str(chip, tbuf, tbuf_len);
     mutex_unlock(&chip->lock);
 
     if (*offset >= len)
@@ -375,7 +380,7 @@ static ssize_t neostrip_cdev_write(struct file *fp, const char *buf, size_t size
     tbuf[size] = '\0';
 
     mutex_lock(&chip->lock);
-    ret = neostrip_set_color_from_str(chip, tbuf);
+    ret = neostrip_set_pixels_from_str(chip, tbuf);
     mutex_unlock(&chip->lock);
 
 out:
@@ -486,9 +491,9 @@ static int neostrip_probe(struct spi_device *spi)
         goto fail_dealloc;
     }
 
-    // allocate color buffer
-    chip->colors = kzalloc(chip->strip_len * sizeof(*chip->colors), GFP_KERNEL);
-    if (!chip->colors)
+    // allocate pixel buffer
+    chip->pixels = kzalloc(chip->strip_len * sizeof(*chip->pixels), GFP_KERNEL);
+    if (!chip->pixels)
     {
         ret = -ENOMEM;
         goto fail_dealloc;
@@ -574,8 +579,8 @@ static int neostrip_probe(struct spi_device *spi)
     if (chip && chip->spi_buf)
         kfree(chip->spi_buf);
 #endif
-    if (chip && chip->colors)
-        kfree(chip->colors);
+    if (chip && chip->pixels)
+        kfree(chip->pixels);
     spi_set_drvdata(spi, NULL);
     kfree(chip);
 
@@ -605,7 +610,7 @@ static int neostrip_remove(struct spi_device *spi)
 #ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
     kfree(chip->spi_buf);
 #endif
-    kfree(chip->colors);
+    kfree(chip->pixels);
     spi_set_drvdata(spi, NULL);
     kfree(chip);
     dev_info(&spi->dev, "neostrip driver unloaded\n");
-- 
2.19.1

