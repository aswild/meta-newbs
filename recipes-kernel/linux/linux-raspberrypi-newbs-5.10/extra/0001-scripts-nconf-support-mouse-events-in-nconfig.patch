From 40e94bc6e48e8060d30b3ea41322f2e0a0526885 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Sun, 3 Sep 2017 23:43:00 -0400
Subject: [PATCH] scripts: nconf: support mouse events in nconfig

Single-click a menu item to highlight, and double-click to cycle the
value or enter a submenu (equivalent to pressing enter)

If available (ncurses 6), scroll through lists with the mouse wheel.
---
 scripts/kconfig/nconf.c     | 92 ++++++++++++++++++++++++++++++++++++-
 scripts/kconfig/nconf.gui.c | 16 +++++++
 scripts/kconfig/nconf.h     |  8 ++++
 3 files changed, 115 insertions(+), 1 deletion(-)

diff --git a/scripts/kconfig/nconf.c b/scripts/kconfig/nconf.c
index af814b39b876..f445ed024713 100644
--- a/scripts/kconfig/nconf.c
+++ b/scripts/kconfig/nconf.c
@@ -946,6 +946,89 @@ static void center_item(int selected_index, int *last_top_row)
 	refresh_all_windows(main_window);
 }
 
+/* Scroll the view, only changing the current item if it would move off screen
+ * or if the view is already scrolled all the way
+ * scroll_up is handled as a boolean: true for up, false for down */
+static void scroll_menu(int scroll_up, int *last_top_row)
+{
+	int toprow;
+	int selected_index;
+
+	set_top_row(curses_menu, *last_top_row);
+	toprow = top_row(curses_menu);
+	selected_index = item_index(current_item(curses_menu));
+
+	if (scroll_up) {
+		int last_visible_item;
+		if (toprow == 0) {
+			/* The view is scrolled all the way up, select the next item up */
+			menu_driver(curses_menu, REQ_UP_ITEM);
+			return;
+		}
+
+		set_top_row(curses_menu, --toprow);
+		last_visible_item = min(toprow + mwin_max_lines - 1, item_count(curses_menu));
+		if (selected_index > last_visible_item)
+			selected_index = last_visible_item;
+	} else { /* scroll down */
+		int last_top_row = max(item_count(curses_menu) - mwin_max_lines, 0);
+		if (toprow == last_top_row) {
+			/* the view is scrolled all the way down, select the next item down */
+			menu_driver(curses_menu, REQ_DOWN_ITEM);
+			return;
+		}
+
+		set_top_row(curses_menu, ++toprow);
+		if (selected_index < toprow)
+			selected_index = toprow;
+	}
+
+	set_current_item(curses_menu, curses_menu_items[selected_index]);
+	*last_top_row = toprow;
+	post_menu(curses_menu);
+	refresh_all_windows(main_window);
+}
+
+/* return the index of the clicked item, or -1 if out of range.
+ * click_y should be mevent.y from an MEVENT retrieved with getmouse() */
+static int get_clicked_item(int click_y, int toprow)
+{
+	int begy, maxy;
+	WINDOW *win = menu_win(curses_menu);
+	if (!win)
+		return -1;
+
+	begy = getbegy(win);
+	maxy = getmaxy(win);
+	if (click_y >= begy && click_y < (begy + maxy))
+		return toprow + click_y - begy;
+	return -1;
+}
+
+static void handle_mouse_event(int *res, int *last_top_row)
+{
+	MEVENT mevent;
+	if (getmouse(&mevent) == OK) {
+		if ((mevent.bstate & BUTTON1_CLICKED) ||
+			(mevent.bstate & BUTTON1_DOUBLE_CLICKED)) {
+			int clicked_item = get_clicked_item(mevent.y, *last_top_row);
+			if (clicked_item != -1) {
+				center_item(clicked_item, last_top_row);
+
+				/* if double-click, change res to an enter key to use the select/toggle handler */
+				if (mevent.bstate & BUTTON1_DOUBLE_CLICKED)
+					*res = 10;
+			}
+		}
+#if NCURSES_MOUSE_VERSION > 1
+		else if (mevent.bstate & BUTTON4_PRESSED)
+			scroll_menu(TRUE, last_top_row);
+		else if (mevent.bstate & BUTTON5_PRESSED)
+			scroll_menu(FALSE, last_top_row);
+#endif
+	}
+}
+
 /* this function assumes reset_menu has been called before */
 static void show_menu(const char *prompt, const char *instructions,
 		int selected_index, int *last_top_row)
@@ -1128,6 +1211,9 @@ static void conf(struct menu *menu)
 			case KEY_END:
 				menu_driver(curses_menu, REQ_LAST_ITEM);
 				break;
+			case KEY_MOUSE:
+				handle_mouse_event(&res, &last_top_row);
+				break;
 			case 'h':
 			case '?':
 				show_help((struct menu *) item_data());
@@ -1136,7 +1222,7 @@ static void conf(struct menu *menu)
 			if (res == 10 || res == 27 ||
 				res == 32 || res == 'n' || res == 'y' ||
 				res == KEY_LEFT || res == KEY_RIGHT ||
-				res == 'm')
+				res == 'm' || res == KEY_MOUSE)
 				break;
 			refresh_all_windows(main_window);
 		}
@@ -1310,6 +1396,9 @@ static void conf_choice(struct menu *menu)
 			case KEY_END:
 				menu_driver(curses_menu, REQ_LAST_ITEM);
 				break;
+			case KEY_MOUSE:
+				handle_mouse_event(&res, &last_top_row);
+				break;
 			case 'h':
 			case '?':
 				show_help((struct menu *) item_data());
@@ -1498,6 +1587,7 @@ int main(int ac, char **av)
 	cbreak();
 	noecho();
 	keypad(stdscr, TRUE);
+	mousemask(NCONF_MOUSEMASK, NULL);
 	curs_set(0);
 
 	getmaxyx(stdscr, lines, columns);
diff --git a/scripts/kconfig/nconf.gui.c b/scripts/kconfig/nconf.gui.c
index 77f525a8617c..d69c5ecbc610 100644
--- a/scripts/kconfig/nconf.gui.c
+++ b/scripts/kconfig/nconf.gui.c
@@ -590,6 +590,10 @@ void show_scroll_win(WINDOW *main_window,
 
 	win = newwin(win_lines, win_cols, y, x);
 	keypad(win, TRUE);
+#if NCURSES_MOUSE_VERSION > 1
+	/* get mouse scroll events if available */
+	mousemask(BUTTON4_PRESSED | BUTTON5_PRESSED, NULL);
+#endif
 	/* show the help in the help window, and show the help panel */
 	(void) wattrset(win, attributes[SCROLLWIN_BOX]);
 	box(win, 0, 0);
@@ -611,6 +615,18 @@ void show_scroll_win(WINDOW *main_window,
 		wrefresh(win);
 
 		res = wgetch(win);
+#if NCURSES_MOUSE_VERSION > 1
+		/* translate mouse scrolling events to their keyboard equivalents */
+		if (res == KEY_MOUSE) {
+			MEVENT mevent;
+			if (getmouse(&mevent) == OK) {
+				if (mevent.bstate & BUTTON4_PRESSED)
+					res = KEY_UP;
+				else if (mevent.bstate & BUTTON5_PRESSED)
+					res = KEY_DOWN;
+			}
+		}
+#endif
 		switch (res) {
 		case KEY_NPAGE:
 		case ' ':
diff --git a/scripts/kconfig/nconf.h b/scripts/kconfig/nconf.h
index fa5245eb93a7..77a5b1f2a472 100644
--- a/scripts/kconfig/nconf.h
+++ b/scripts/kconfig/nconf.h
@@ -22,6 +22,14 @@
 #include <time.h>
 #include <sys/time.h>
 
+
+#if NCURSES_MOUSE_VERSION > 1
+#define NCONF_MOUSEMASK (BUTTON1_CLICKED | BUTTON1_DOUBLE_CLICKED | \
+			 BUTTON4_PRESSED | BUTTON5_PRESSED )
+#else
+#define NCONF_MOUSEMASK (BUTTON1_CLICKED | BUTTON1_DOUBLE_CLICKED)
+#endif
+
 #define max(a, b) ({\
 		typeof(a) _a = a;\
 		typeof(b) _b = b;\
-- 
2.32.0

