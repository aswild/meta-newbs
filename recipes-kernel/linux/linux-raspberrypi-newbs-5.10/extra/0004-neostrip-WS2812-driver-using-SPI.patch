From cab79a77fad4585e4d87053817e2ed8cf33916a7 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Tue, 14 Mar 2017 01:02:48 -0400
Subject: [PATCH] neostrip WS2812 driver using SPI

[8 patches squashed]

neostrip: add initial ws2812 driver

It has some output, but is incorrect. Timing is probably wacky

neostrip: tweak to workaround SPI hardware resetting data in between bites

neostrip: add support for multiple pixels

TODO:
 * re-implement ioctls
 * add color_raw in sysfs
 * add per-pixel sysfs files

fix pin numbers in spi0-neostrip and spi1-shiftbrite overlays

neostrip: refactor colors -> pixels

neostrip: add per-pixel sysfs entries

Plus:
 * use attribute_group stuff to create the static attributes
 * add comments for vim folding

neostrip: implement read/write ioctls

neostrip, shiftbrite: include uaccess.h from linux/ rather than asm/

The definitions for copy_(to|from)_user moved
---
 arch/arm/boot/dts/overlays/Makefile           |   2 +
 .../dts/overlays/spi0-neostrip-overlay.dts    |  54 ++
 .../dts/overlays/spi1-neostrip-overlay.dts    |  50 ++
 .../dts/overlays/spi1-shiftbrite-overlay.dts  |   2 +-
 drivers/spi/Kconfig                           |  19 +
 drivers/spi/Makefile                          |   1 +
 drivers/spi/neostrip.c                        | 819 ++++++++++++++++++
 include/uapi/spi/neostrip.h                   |  37 +
 8 files changed, 983 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/boot/dts/overlays/spi0-neostrip-overlay.dts
 create mode 100644 arch/arm/boot/dts/overlays/spi1-neostrip-overlay.dts
 create mode 100644 drivers/spi/neostrip.c
 create mode 100644 include/uapi/spi/neostrip.h

diff --git a/arch/arm/boot/dts/overlays/Makefile b/arch/arm/boot/dts/overlays/Makefile
index ce142c8cbbf1..b0c841e82cc3 100644
--- a/arch/arm/boot/dts/overlays/Makefile
+++ b/arch/arm/boot/dts/overlays/Makefile
@@ -180,10 +180,12 @@ dtbo-$(CONFIG_ARCH_BCM2835) += \
 	spi-rtc.dtbo \
 	spi0-1cs.dtbo \
 	spi0-2cs.dtbo \
+	spi0-neostrip.dtbo \
 	spi0-shiftbrite.dtbo \
 	spi1-1cs.dtbo \
 	spi1-2cs.dtbo \
 	spi1-3cs.dtbo \
+	spi1-neostrip.dtbo \
 	spi1-shiftbrite.dtbo \
 	spi2-1cs.dtbo \
 	spi2-2cs.dtbo \
diff --git a/arch/arm/boot/dts/overlays/spi0-neostrip-overlay.dts b/arch/arm/boot/dts/overlays/spi0-neostrip-overlay.dts
new file mode 100644
index 000000000000..2f5f7936e8f8
--- /dev/null
+++ b/arch/arm/boot/dts/overlays/spi0-neostrip-overlay.dts
@@ -0,0 +1,54 @@
+/*
+ * Device Tree overlay for the neostrip module
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+    compatible = "brcm,bcm2835", "brcm,bcm2708", "brcm,bcm2709";
+
+    fragment@0 {
+        target = <&gpio>;
+        __overlay__ {
+            spi0_pins: spi0_pins {
+                // we only need the data pin
+                brcm,pins = <10>;
+                brcm,function = <4>; /* alt0 (spi mosi) */
+            };
+        };
+    };
+
+    fragment@1 {
+        target = <&spi0>;
+        __overlay__ {
+            #address-cells = <1>;
+            #size-cells = <0>;
+
+            status = "okay";
+            pinctrl-names = "default";
+            pinctrl-0 = <&spi0_pins>;
+
+            /* disable spi-dev for spi0.0 & spi0.1 */
+            spidev@0 {
+                status = "disabled";
+            };
+            spidev@1 {
+                status = "disabled";
+            };
+
+            neostrip0: neostrip@0 {
+                status = "okay";
+                compatible = "neostrip";
+                reg = <0>;      /* CE0 */
+                spi-max-frequency = <3000000>;
+                strip-length = <1>;
+            };
+        };
+    };
+
+    __overrides__ {
+        neostrip0_length = <&neostrip0>,"strip-length:0";
+    };
+};
diff --git a/arch/arm/boot/dts/overlays/spi1-neostrip-overlay.dts b/arch/arm/boot/dts/overlays/spi1-neostrip-overlay.dts
new file mode 100644
index 000000000000..4ef65e478765
--- /dev/null
+++ b/arch/arm/boot/dts/overlays/spi1-neostrip-overlay.dts
@@ -0,0 +1,50 @@
+/*
+ * Device Tree overlay for the neostrip module
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+    compatible = "brcm,bcm2835", "brcm,bcm2708", "brcm,bcm2709";
+
+    fragment@0 {
+        target = <&gpio>;
+        __overlay__ {
+            spi1_pins: spi1_pins {
+                // we only need the data pin
+                brcm,pins = <20>;
+                brcm,function = <4>; /* alt0 (spi mosi) */
+            };
+        };
+    };
+
+    fragment@1 {
+        target = <&spi1>;
+        __overlay__ {
+            #address-cells = <1>;
+            #size-cells = <0>;
+
+            status = "okay";
+            pinctrl-names = "default";
+            pinctrl-0 = <&spi1_pins>;
+
+            /* disable spi-dev for spi1.0 & spi1.1 */
+            spidev@0 {
+                status = "disabled";
+            };
+            spidev@1 {
+                status = "disabled";
+            };
+
+            neostrip0: neostrip@0 {
+                compatible = "neostrip";
+                reg = <0>;      /* CE0 */
+                spi-max-frequency = <2400000>;
+                latch-gpio = <9>;
+                status = "okay";
+            };
+        };
+    };
+};
diff --git a/arch/arm/boot/dts/overlays/spi1-shiftbrite-overlay.dts b/arch/arm/boot/dts/overlays/spi1-shiftbrite-overlay.dts
index b22f6de69a95..14069b4a7d29 100644
--- a/arch/arm/boot/dts/overlays/spi1-shiftbrite-overlay.dts
+++ b/arch/arm/boot/dts/overlays/spi1-shiftbrite-overlay.dts
@@ -22,7 +22,7 @@ spi1_pins: spi1_pins {
                  * make sense to have other devices on the same SPI bus, therefore
                  * we can re-purpose the SPI MISO pin (9) as the latch output GPIO
                  */
-                brcm,pins = <9 10 11>;
+                brcm,pins = <19 20 21>;
                 brcm,function = <1 4 4>; /* output (latch), alt0 (spi) */
             };
         };
diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 16e3ea333082..c1f8ee7c65c3 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -1012,6 +1012,25 @@ config SPI_SHIFTBRITE
 	    Driver to control ShiftBrite LEDs with a SPI bus, using the chip
 	    select GPIO to toggle the latch pin.
 
+config SPI_NEOSTRIP
+	tristate "WS2812 RGB LED driver (SPI hardware)"
+	default n
+	help
+	    Driver to control "NeoPixel" RGB LEDs using SPI hardware
+
+if SPI_NEOSTRIP
+config SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+	bool "Use a one-time-allocated buffer for the strip's SPI data"
+	default y
+	help
+		The SPI data buffer must be 3 bytes for each byte of color data.
+		Enabling this option allocates that buffer when the driver loads
+		and re-uses it across transfers. Otherwise, the SPI buffer is
+		malloc'd and free'd for each write of the strip.
+
+		Memory-constrained systems may want to say no here.
+endif
+
 config SPI_TLE62X0
 	tristate "Infineon TLE62X0 (for power switching)"
 	depends on SYSFS
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index 785fb6ef9e72..517217555899 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -71,6 +71,7 @@ obj-$(CONFIG_SPI_MT7621)		+= spi-mt7621.o
 obj-$(CONFIG_SPI_MTK_NOR)		+= spi-mtk-nor.o
 obj-$(CONFIG_SPI_MXIC)			+= spi-mxic.o
 obj-$(CONFIG_SPI_MXS)			+= spi-mxs.o
+obj-$(CONFIG_SPI_NEOSTRIP)		+= neostrip.o
 obj-$(CONFIG_SPI_NPCM_FIU)		+= spi-npcm-fiu.o
 obj-$(CONFIG_SPI_NPCM_PSPI)		+= spi-npcm-pspi.o
 obj-$(CONFIG_SPI_NXP_FLEXSPI)		+= spi-nxp-fspi.o
diff --git a/drivers/spi/neostrip.c b/drivers/spi/neostrip.c
new file mode 100644
index 000000000000..79ef56dc5425
--- /dev/null
+++ b/drivers/spi/neostrip.c
@@ -0,0 +1,819 @@
+/***********************************************************************
+ * WS2812 "NeoPixel" RGB LED driver
+ *
+ * Copyright (C) 2017 Allen Wild <allenwild93@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, version 2.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ ***********************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/cdev.h>
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/ioctl.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/spinlock.h>
+#include <linux/spi/spi.h>
+#include <linux/string.h>
+#include <linux/uaccess.h>
+#include <uapi/spi/neostrip.h>
+
+// definitions
+
+// with a clock speed of 250MHz, a 3MHz SPI clock uses cdiv=84
+// and an actual speed of 2.97619 MHz
+// This corresponds to 336 and 672 ns pulses
+#define NEOSTRIP_SPEED_HZ   3000000
+
+// It takes 3 bytes of SPI data to transmit 1 byte of ws2812 color data
+// and 3 bytes of color data per pixel
+#define NEOSTRIP_SPIBUF_LENGTH(__strip_len) ((__strip_len) * 9)
+
+struct neostrip_pixel_attr {
+    struct device_attribute dev_attr;
+    int                     index;
+};
+
+struct neostrip_chip {
+    dev_t               devt;
+    struct device       *dev;
+    struct spi_device   *spi;
+    struct list_head    device_entry;
+    struct neostrip_pixel_attr *pixel_attrs;
+
+    int                 in_use;
+    struct mutex        in_use_lock;
+
+    struct mutex        lock;
+    u32                 *pixels;    // 24-bit 0xRRGGBB value
+    int                 strip_len;
+
+#ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+    u8                  *spi_buf;
+#endif
+};
+
+// static globals
+
+#define N_NEOSTRIP_MINORS 8
+
+static DECLARE_BITMAP(minors, N_NEOSTRIP_MINORS);
+static LIST_HEAD(device_list);
+static DEFINE_MUTEX(device_list_lock);
+
+static int              neostrip_major; // dynamically allocated major number
+static struct class     *neostrip_class;
+
+// Internal Core Functions {{{
+
+// Expand a nibble of val (upper or lower) from 00000000abcd to 1a01b01c01d0
+// Magic multiplication and masking from
+//  https://developer.mbed.org/users/JacobBramley/code/PixelArray/file/47802e75974e/neopixel.cpp
+static inline u16 neostrip_expand_nibble(u8 val, int upper)
+{
+    if (upper)
+        val = (val >> 4) & 0xf;
+    else
+        val = val & 0xf;
+
+    return 04444 |                  // 100100100100
+           ((val * 0x88) & 0x410) | // 0a00000c0000
+           ((val * 0x22) & 0x82);   // 0000b00000d0
+}
+
+// store the expanded representation of val into the first 3 bytes of dest
+static void neostrip_expand_chunk(u8 *dest, u8 val)
+{
+    u16 exp_low = neostrip_expand_nibble(val, 0);
+    u16 exp_upp = neostrip_expand_nibble(val, 1);
+
+    dest[0] = (exp_upp >> 4) & 0xff;
+    dest[1] = ((exp_upp << 4) & 0xf0) | ((exp_low >> 8) & 0x0f);
+    dest[2] = exp_low & 0xff;
+}
+
+// expand a 24-byte color to 9 bytes of ws2812 data
+static inline void neostrip_expand_color(u8 *dest, u32 color)
+{
+    neostrip_expand_chunk(&dest[0], (color >>  8) & 0xff); // green
+    neostrip_expand_chunk(&dest[3], (color >> 16) & 0xff); // red
+    neostrip_expand_chunk(&dest[6], (color >>  0) & 0xff); // blue
+}
+
+static int neostrip_write(struct neostrip_chip *chip)
+{
+    struct spi_device   *spi = chip->spi;
+    struct spi_message  msg;
+    u8                  *buf;
+    size_t              buf_len;
+    int                 i, ret = 0;
+    struct spi_transfer xfer = {
+        .speed_hz   = NEOSTRIP_SPEED_HZ,
+    };
+
+    buf_len = NEOSTRIP_SPIBUF_LENGTH(chip->strip_len);
+#ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+    buf = chip->spi_buf;
+#else
+    buf = kmalloc(buf_len, GFP_KERNEL);
+    if (!buf)
+        return -ENOMEM;
+#endif
+
+    for (i = 0; i < chip->strip_len; i++)
+    {
+        // It seems that the bcm2835 SPI hardware pulls data low for 1 clock cycle
+        // after each byte transfered, which can cause bits to be interpreted by the
+        // WS2812 when we have 2 consecutive "1" bits representing a long high pulse.
+        // The way our colors are expanded, this happens between the 2nd and 3rd bytes
+        // of each 3-byte chunk (per byte of color data) This means that if bit
+        // 2 of a data byte is set, the problem will occur. (if that bit is zero,
+        // a little extra low time doesn't hurt). Therefore mask out that bit and
+        // don't allow it to be set.
+        //   1 x 0 1 x 0 1 x  |  0 1 x 0 1 x 0 1  |  X 0 1 x 0 1 x 0
+        chip->pixels[i] &= 0xfbfbfb;
+
+        neostrip_expand_color(&buf[i*9], chip->pixels[i]);
+    }
+
+    //print_hex_dump(KERN_INFO, "neostrip buf: ", DUMP_PREFIX_OFFSET, 16, 1, buf, sizeof(buf), 0);
+
+    xfer.tx_buf = buf;
+    xfer.len = buf_len;
+    spi_message_init(&msg);
+    spi_message_add_tail(&xfer, &msg);
+
+    ret = spi_sync(spi, &msg);
+    if (ret)
+    {
+        dev_err(chip->dev, "spi_sync failed (%d)\n", ret);
+    }
+
+    // you don't really need 50us to reset the strip
+    udelay(20);
+
+    return ret;
+}
+
+static inline void neostrip_clear_strip(struct neostrip_chip *chip)
+{
+    memset(chip->pixels, 0, chip->strip_len * sizeof(*chip->pixels));
+}
+
+static int neostrip_set_pixels_from_str(struct neostrip_chip *chip, const char *strbuf)
+{
+    int             ret;
+    int             count = 0;
+
+    if (!strncmp(strbuf, "clear", 5))
+    {
+        // if the input is "clear" zero out the strip
+        neostrip_clear_strip(chip);
+    }
+    else if (!strncmp(strbuf, "refresh", 7))
+    {
+        // if the input is "refresh" don't update anything
+        // (just call neostrip_write below)
+    }
+    else
+    {
+        char *str, *word;
+        u32  *pixels;
+
+        // duplicate the string since strsep mangles it
+        str = kstrdup(strbuf, GFP_KERNEL);
+        if (!str)
+            return -ENOMEM;
+
+        pixels = kmalloc(sizeof(*pixels) * chip->strip_len, GFP_KERNEL);
+        if (!pixels)
+        {
+            kfree(str);
+            return -ENOMEM;
+        }
+
+        count = 0;
+        while ((word = strsep(&str, " \t")) != NULL)
+        {
+            if (word[0] == '\0')
+                continue; // ignore multiple delimiters
+
+            ret = kstrtou32(word, 16, &pixels[count]);
+            if (ret)
+            {
+                kfree(str);
+                kfree(pixels);
+                return -EINVAL;
+            }
+            pr_debug("set pixels[%d] to 0x%06x\n", count, pixels[count]);
+            count++;
+        }
+
+        dev_dbg(chip->dev, "set color from string '%s'\n", strbuf);
+        dev_dbg(chip->dev, "got %d pixels. will copy %zu bytes\n", count, count * sizeof(*pixels));
+
+        // only update the values we read in
+        if (count)
+            memcpy(chip->pixels, pixels, count * sizeof(*pixels));
+    }
+
+    return neostrip_write(chip);
+}
+
+static ssize_t neostrip_pixels_str(struct neostrip_chip *chip, char *buf, ssize_t buf_len)
+{
+    int i;
+    ssize_t count = 0;
+
+    for (i = 0; i < chip->strip_len; i++)
+    {
+        count += scnprintf(buf + count, buf_len, "%06x%s",
+                           chip->pixels[i], (i != chip->strip_len - 1) ? " " : "\n");
+    }
+
+    return count;
+}
+
+// }}}
+
+// sysfs functions {{{
+
+static ssize_t neostrip_sysfs_pixel_show(struct device *dev,
+                                         struct device_attribute *attr,
+                                         char *buf)
+{
+    struct neostrip_chip        *chip = dev_get_drvdata(dev);
+    struct neostrip_pixel_attr  *pixel_attr;
+    ssize_t                     count = 0;
+    int                         index;
+
+    mutex_lock(&chip->lock);
+    pixel_attr = container_of(attr, struct neostrip_pixel_attr, dev_attr);
+    index = pixel_attr->index;
+    count = scnprintf(buf, PAGE_SIZE, "%06x\n", chip->pixels[index]);
+    mutex_unlock(&chip->lock);
+
+    return count;
+}
+
+static ssize_t neostrip_sysfs_pixel_store(struct device *dev,
+                                          struct device_attribute *attr,
+                                          const char *buf, size_t count)
+{
+    struct neostrip_chip        *chip = dev_get_drvdata(dev);
+    struct neostrip_pixel_attr  *pixel_attr;
+    int                         index, err;
+    u32                         val;
+
+    mutex_lock(&chip->lock);
+    pixel_attr = container_of(attr, struct neostrip_pixel_attr, dev_attr);
+    index = pixel_attr->index;
+    err = kstrtou32(buf, 16, &val);
+    if (!err)
+    {
+        chip->pixels[index] = val;
+        err = neostrip_write(chip);
+    }
+    mutex_unlock(&chip->lock);
+
+    return err ? err : count;
+}
+
+static ssize_t neostrip_sysfs_pixels_show(struct device *dev,
+                                          struct device_attribute *attr,
+                                          char *buf)
+{
+    struct neostrip_chip    *chip = dev_get_drvdata(dev);
+    ssize_t                 count = 0;
+
+    mutex_lock(&chip->lock);
+    count = neostrip_pixels_str(chip, buf, 4096);
+    mutex_unlock(&chip->lock);
+
+    return count;
+}
+
+static ssize_t neostrip_sysfs_pixels_store(struct device *dev,
+                                           struct device_attribute *attr,
+                                           const char *buf, size_t count)
+{
+    struct neostrip_chip *chip = dev_get_drvdata(dev);
+    int err;
+
+    mutex_lock(&chip->lock);
+    err = neostrip_set_pixels_from_str(chip, buf);
+    mutex_unlock(&chip->lock);
+
+    return err ? err : count;
+}
+static DEVICE_ATTR(pixels, 0644, neostrip_sysfs_pixels_show, neostrip_sysfs_pixels_store);
+
+// Array of sysfs attributes to be automatically created/removed
+static struct attribute *neostrip_sysfs_attrs[] = {
+    &dev_attr_pixels.attr,
+    NULL,
+};
+static struct attribute_group neostrip_sysfs_attr_group = {
+    .attrs = neostrip_sysfs_attrs,
+};
+static const struct attribute_group *neostrip_sysfs_attr_groups[] = {
+    &neostrip_sysfs_attr_group,
+    NULL,
+};
+
+// }}}
+
+// {{{ device node functions
+
+static int neostrip_cdev_open(struct inode *inode, struct file *fp)
+{
+    struct neostrip_chip    *chip;
+    int                     ret = -ENXIO;
+
+    // find the driver data
+    list_for_each_entry(chip, &device_list, device_entry)
+    {
+        if (chip->devt == inode->i_rdev)
+        {
+            ret = 0;
+            break;
+        }
+    }
+    if (ret)
+    {
+        pr_err("neostrip: device not found\n");
+        return ret;
+    }
+
+    mutex_lock(&chip->in_use_lock);
+    if (chip->in_use)
+    {
+        ret = -EBUSY;
+        goto out;
+    }
+
+    chip->in_use = 1;
+    fp->private_data = chip;
+    nonseekable_open(inode, fp);
+
+out:
+    mutex_unlock(&chip->in_use_lock);
+    return ret;
+}
+
+static int neostrip_cdev_release(struct inode *inode, struct file *fp)
+{
+    struct neostrip_chip *chip;
+
+    chip = fp->private_data;
+    fp->private_data = NULL;
+    mutex_lock(&chip->in_use_lock);
+    chip->in_use = 0;
+    mutex_unlock(&chip->in_use_lock);
+
+    return 0;
+}
+
+static ssize_t neostrip_cdev_read(struct file *fp, char *buf, size_t count, loff_t *offset)
+{
+    struct neostrip_chip    *chip;
+    size_t                  len, tbuf_len;
+    char                    *tbuf;
+
+    chip = fp->private_data;
+
+    // each pixel is printed as "0x123456 " (or \n instead of a space)
+    // plus a nullbyte
+    tbuf_len = chip->strip_len * 9 + 1;
+    tbuf = kmalloc(tbuf_len, GFP_KERNEL);
+    if (!tbuf)
+        return -ENOMEM;
+
+    mutex_lock(&chip->lock);
+    len = neostrip_pixels_str(chip, tbuf, tbuf_len);
+    mutex_unlock(&chip->lock);
+
+    if (*offset >= len)
+        return 0;
+
+    if (*offset + count > len)
+        count = len - *offset;
+
+    if (copy_to_user(buf, tbuf + *offset, count))
+        return -EFAULT;
+
+    kfree(tbuf);
+    *offset += count;
+    return count;
+}
+
+static ssize_t neostrip_cdev_write(struct file *fp, const char *buf, size_t size, loff_t *offset)
+{
+    struct neostrip_chip    *chip;
+    int                     ret;
+    char                    *tbuf;
+
+    chip = fp->private_data;
+
+    // copy to a temporary buffer so we can null-terminate the string
+    tbuf = kzalloc(size + 1, GFP_KERNEL);
+    if (tbuf == NULL)
+        return -ENOMEM;
+
+    ret = copy_from_user(tbuf, buf, size);
+    if (ret)
+    {
+        ret = -EFAULT;
+        goto out;
+    }
+    tbuf[size] = '\0';
+
+    mutex_lock(&chip->lock);
+    ret = neostrip_set_pixels_from_str(chip, tbuf);
+    mutex_unlock(&chip->lock);
+
+out:
+    kfree(tbuf);
+    return (ret < 0) ? ret : size;
+}
+
+// }}}
+
+// ioctl {{{
+
+static long neostrip_handle_ioctl(struct neostrip_chip *chip, struct neostrip_ioc_data __user *ioc_data_user, int read)
+{
+    struct neostrip_ioc_data    *ioc_data = NULL;
+    long                        ret = 0;
+
+    ioc_data = kmalloc(sizeof(*ioc_data), GFP_KERNEL);
+    if (!ioc_data)
+        return -ENOMEM;
+
+    if (copy_from_user(ioc_data, ioc_data_user, sizeof(*ioc_data)))
+    {
+        ret = -EFAULT;
+        goto out;
+    }
+
+    if (!ioc_data->pixels || !ioc_data->count || (ioc_data->offset + ioc_data->count) > chip->strip_len)
+    {
+        ret = -EINVAL;
+        goto out;
+    }
+
+    if (read)
+    {
+        if (copy_to_user(ioc_data->pixels, chip->pixels + ioc_data->offset, ioc_data->count * sizeof(*chip->pixels)))
+        {
+            ret = -EFAULT;
+            goto out;
+        }
+    }
+    else // write
+    {
+        if (copy_from_user(chip->pixels + ioc_data->offset, ioc_data->pixels, ioc_data->count * sizeof(*chip->pixels)))
+        {
+            ret = -EFAULT;
+            goto out;
+        }
+        ret = neostrip_write(chip);
+    }
+
+out:
+    kfree(ioc_data);
+    return ret;
+}
+
+long neostrip_cdev_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
+{
+    struct neostrip_chip    *chip;
+    long                    ret = 0;
+
+    chip = fp->private_data;
+
+    switch (cmd)
+    {
+        case NEOSTRIP_IOC_HELLO:
+            dev_info(chip->dev, "ioctl hello with arg 0x%lX\n", arg);
+            break;
+
+        case NEOSTRIP_IOC_READ:
+            mutex_lock(&chip->lock);
+            ret = neostrip_handle_ioctl(chip, (struct neostrip_ioc_data __user *)arg, 1);
+            mutex_unlock(&chip->lock);
+            break;
+
+        case NEOSTRIP_IOC_WRITE:
+            mutex_lock(&chip->lock);
+            ret = neostrip_handle_ioctl(chip, (struct neostrip_ioc_data __user *)arg, 0);
+            mutex_unlock(&chip->lock);
+            break;
+
+        default:
+            dev_err(chip->dev, "unknown ioctl\n");
+            ret = -ENOTTY;
+            break;
+    }
+    return ret;
+}
+// }}}
+
+static struct file_operations neostrip_cdev_fops = {
+    .open           = neostrip_cdev_open,
+    .release        = neostrip_cdev_release,
+    .read           = neostrip_cdev_read,
+    .write          = neostrip_cdev_write,
+    .unlocked_ioctl = neostrip_cdev_ioctl,
+};
+
+// Init/Exit Functions
+
+static const struct of_device_id neostrip_dt_ids[] = {
+    { .compatible = "neostrip" },
+    {},
+};
+MODULE_DEVICE_TABLE(of, neostrip_dt_ids);
+
+static int neostrip_probe(struct spi_device *spi)
+{
+    struct neostrip_chip    *chip;
+    struct device           *dev;
+    unsigned long           minor;
+    int                     sysfs_i, ret;
+    struct property         *strip_len_prop;
+
+    // verify DT compatible string
+    if (spi->dev.of_node && !of_match_device(neostrip_dt_ids, &spi->dev))
+    {
+        dev_err(&spi->dev, "buggy DT!\n");
+        WARN_ON(spi->dev.of_node && !of_match_device(neostrip_dt_ids, &spi->dev));
+    }
+
+    // allocate neostrip data
+    chip = kzalloc(sizeof(*chip), GFP_KERNEL);
+    if (!chip)
+    {
+        dev_err(&spi->dev, "kzalloc failed\n");
+        ret = -ENOMEM;
+        goto fail;
+    }
+
+    // initialize  data
+    spi_set_drvdata(spi, chip);
+    chip->spi = spi;
+    mutex_init(&chip->lock);
+    mutex_init(&chip->in_use_lock);
+    INIT_LIST_HEAD(&chip->device_entry);
+
+    // get the strip length from DT
+    strip_len_prop = of_find_property(spi->dev.of_node, "strip-length", NULL);
+    if (strip_len_prop)
+    {
+        chip->strip_len = be32_to_cpu(*(__be32 *)strip_len_prop->value);
+    }
+    else
+    {
+        dev_warn(&spi->dev, "couldn't find DT property 'strip-length'\n");
+        chip->strip_len = 1;
+    }
+
+    if (chip->strip_len < 1)
+    {
+        dev_err(&spi->dev, "Invalid strip length: %d\n", chip->strip_len);
+        ret = -EINVAL;
+        goto fail_dealloc;
+    }
+
+    // allocate pixel buffer
+    chip->pixels = kzalloc(chip->strip_len * sizeof(*chip->pixels), GFP_KERNEL);
+    if (!chip->pixels)
+    {
+        ret = -ENOMEM;
+        goto fail_dealloc;
+    }
+
+#ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+    chip->spi_buf = kzalloc(NEOSTRIP_SPIBUF_LENGTH(chip->strip_len), GFP_KERNEL);
+    if (!chip->spi_buf)
+    {
+        ret = -ENOMEM;
+        goto fail_dealloc;
+    }
+#endif
+
+    // get a minor device number
+    mutex_lock(&device_list_lock);
+    minor = find_first_zero_bit(minors, N_NEOSTRIP_MINORS);
+    if (minor >= N_NEOSTRIP_MINORS)
+    {
+        dev_err(&spi->dev, "unable to get minor device number\n");
+        ret = -ENODEV;
+        mutex_unlock(&device_list_lock);
+        goto fail_dealloc;
+    }
+
+    // create device node
+    chip->devt = MKDEV(neostrip_major, minor);
+    chip->dev = device_create(neostrip_class, &spi->dev, chip->devt, chip, "neostrip%lu", minor);
+    if (IS_ERR(chip->dev))
+    {
+        dev_err(&spi->dev, "device_create() failed\n");
+        ret = PTR_ERR_OR_ZERO(dev);
+        mutex_unlock(&device_list_lock);
+        goto fail_dealloc;
+    }
+
+    // add device to the list
+    set_bit(minor, minors);
+    list_add(&chip->device_entry, &device_list);
+
+    mutex_unlock(&device_list_lock);
+
+    // create per-pixel sysfs files
+    // note: technically this creates a sort of race condition with userspace,
+    // but it's dynamic so whatever
+    chip->pixel_attrs = kzalloc(sizeof(*chip->pixel_attrs) * chip->strip_len, GFP_KERNEL);
+    if (!chip->pixel_attrs)
+    {
+        dev_err(chip->dev, "couldn't get memory for pixel_attrs\n");
+        ret = -ENOMEM;
+        goto fail_device_destroy;
+    }
+
+    for (sysfs_i = 0; sysfs_i < chip->strip_len; sysfs_i++)
+    {
+        char nametmp[8];
+        char *name;
+        snprintf(nametmp, sizeof(nametmp), "%d", sysfs_i);
+        name = kstrdup(nametmp, GFP_KERNEL);
+        if (!name)
+        {
+            ret = -ENOMEM;
+            goto fail_destroy_sysfs;
+        }
+
+        chip->pixel_attrs[sysfs_i].index = sysfs_i;
+        chip->pixel_attrs[sysfs_i].dev_attr.attr.name = name;
+        chip->pixel_attrs[sysfs_i].dev_attr.attr.mode = VERIFY_OCTAL_PERMISSIONS(0644);
+        chip->pixel_attrs[sysfs_i].dev_attr.show = neostrip_sysfs_pixel_show;
+        chip->pixel_attrs[sysfs_i].dev_attr.store = neostrip_sysfs_pixel_store;
+
+        ret = device_create_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
+        if (ret)
+        {
+            dev_err(chip->dev, "Failed to create sysfs file %s\n", chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+            goto fail_destroy_sysfs;
+        }
+    }
+
+    // Set up SPI
+    spi->bits_per_word = 8;
+    spi->mode = SPI_MODE_0 | SPI_NO_CS;
+
+    ret = spi_setup(spi);
+    if (ret < 0)
+    {
+        dev_err(chip->dev, "spi_setup failed\n");
+        goto fail_destroy_sysfs;
+    }
+
+    // Done!
+    dev_info(chip->dev, "neostrip driver initialized (%d pixels)\n", chip->strip_len);
+    return 0;
+
+fail_destroy_sysfs:
+    if (sysfs_i < chip->strip_len && chip->pixel_attrs[sysfs_i].dev_attr.attr.name)
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+
+    for (sysfs_i--; sysfs_i >= 0; sysfs_i--)
+    {
+        device_remove_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+    }
+
+    kfree(chip->pixel_attrs);
+
+fail_device_destroy:
+    mutex_lock(&device_list_lock);
+    list_del(&chip->device_entry);
+    device_destroy(neostrip_class, chip->devt);
+    clear_bit(MINOR(chip->devt), minors);
+    mutex_unlock(&device_list_lock);
+
+fail_dealloc:
+#ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+    if (chip && chip->spi_buf)
+        kfree(chip->spi_buf);
+#endif
+    if (chip && chip->pixels)
+        kfree(chip->pixels);
+    spi_set_drvdata(spi, NULL);
+    kfree(chip);
+
+fail:
+    dev_err(&spi->dev, "neostrip initialization failed (%d)\n", ret);
+    return ret;
+}
+
+static int neostrip_remove(struct spi_device *spi)
+{
+    struct neostrip_chip *chip = spi_get_drvdata(spi);
+    int sysfs_i;
+
+    for (sysfs_i = chip->strip_len-1; sysfs_i >= 0; sysfs_i--)
+    {
+        device_remove_file(chip->dev, &chip->pixel_attrs[sysfs_i].dev_attr);
+        kfree(chip->pixel_attrs[sysfs_i].dev_attr.attr.name);
+    }
+    kfree(chip->pixel_attrs);
+
+    mutex_lock(&chip->lock);
+    chip->spi = NULL;
+    mutex_unlock(&chip->lock);
+
+    mutex_lock(&device_list_lock);
+    list_del(&chip->device_entry);
+    device_destroy(neostrip_class, chip->devt);
+    clear_bit(MINOR(chip->devt), minors);
+    mutex_unlock(&device_list_lock);
+
+#ifdef CONFIG_SPI_NEOSTRIP_SPIBUF_MALLOC_ONCE
+    kfree(chip->spi_buf);
+#endif
+    kfree(chip->pixels);
+    spi_set_drvdata(spi, NULL);
+    kfree(chip);
+    dev_info(&spi->dev, "neostrip driver unloaded\n");
+    return 0;
+}
+
+static struct spi_driver neostrip_spi_driver = {
+    .driver = {
+        .name = "neostrip",
+        .owner = THIS_MODULE,
+        .of_match_table = of_match_ptr(neostrip_dt_ids),
+    },
+    .probe  = neostrip_probe,
+    .remove = neostrip_remove,
+};
+
+static int __init neostrip_init(void)
+{
+    int ret;
+
+    // get a major device number
+    neostrip_major = register_chrdev(0, "neostrip", &neostrip_cdev_fops);
+    if (neostrip_major < 0)
+        return neostrip_major;
+
+    // create neostrip class
+    neostrip_class = class_create(THIS_MODULE, "neostrip");
+    if (IS_ERR(neostrip_class))
+    {
+        pr_err("%s: class_create() failed\n", __func__);
+        ret = -1;
+        goto fail_unregister;
+    }
+
+    neostrip_class->dev_groups = neostrip_sysfs_attr_groups;
+
+    // register the SPI protocol driver
+    ret = spi_register_driver(&neostrip_spi_driver);
+    if (ret < 0)
+    {
+        pr_err("%s: spi_register_driver() failed\n", __func__);
+        goto fail_class_destroy;
+    }
+
+    return 0;
+
+fail_class_destroy:
+    class_destroy(neostrip_class);
+fail_unregister:
+    unregister_chrdev(neostrip_major, "neostrip");
+    return ret;
+}
+module_init(neostrip_init);
+
+static void __exit neostrip_exit(void)
+{
+    spi_unregister_driver(&neostrip_spi_driver);
+    class_destroy(neostrip_class);
+    unregister_chrdev(neostrip_major, "neostrip");
+}
+module_exit(neostrip_exit);
+
+MODULE_AUTHOR("Allen Wild <allenwild93@gmail.com>");
+MODULE_DESCRIPTION("WS2812 NeoPixel RGB LED driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("spi:neostrip");
diff --git a/include/uapi/spi/neostrip.h b/include/uapi/spi/neostrip.h
new file mode 100644
index 000000000000..7ad0415d590e
--- /dev/null
+++ b/include/uapi/spi/neostrip.h
@@ -0,0 +1,37 @@
+/***********************************************************************
+ * WS2812 "NeoPixel" RGB LED driver
+ *
+ * Copyright (C) 2017 Allen Wild <allenwild93@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, version 2.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ ***********************************************************************/
+
+#ifndef _NEOSTRIP_H_
+#define _NEOSTRIP_H_
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+struct neostrip_ioc_data {
+    // The first pixel to read/write
+    size_t      offset;
+
+    // how many pixels to read/write
+    size_t      count;
+
+    // data buffer, should be count items long
+    uint32_t    *pixels;
+};
+
+#define NEOSTRIP_IOC_HELLO      _IO('N', 1)
+#define NEOSTRIP_IOC_READ       _IOR('N', 2, struct neostrip_ioc_data *)
+#define NEOSTRIP_IOC_WRITE      _IOW('N', 3, struct neostrip_ioc_data *)
+
+#endif // _NEOSTRIP_H_
-- 
2.32.0

