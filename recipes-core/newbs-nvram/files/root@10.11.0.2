#!/bin/bash
#
# Copyright (C) 2017 Allen Wild <allenwild93@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

NEWBS_NVRAM_DIR=/home/newbs-nvram

[[ -f /etc/default/newbs-nvram ]] && . /etc/default/newbs-nvram
NEWBS_NVRAM_DIR="${NEWBS_NVRAM_DIR%/}"

# mount_item <nvram mount point> [options]
mount_item() {
    local target="$1"
    local mountpoint="${2#${NEWBS_NVRAM_DIR}}"
    shift
    shift
    if [[ -e "$mountpoint" ]]; then
        mount-copybind "$target" "$mountpoint" "$@"
    fi
}

# mount_items_in_dir <dir> [options]
mount_items_in_dir() {
    local dir="$1"
    local opts="$2"
    [[ -z "$dir" ]] && { echo "mount_items_in_dir: No dir specified." ; return 1 }
    if [[ "$dir" != /* ]]; then
        dir="$(realpath "$dir")"
    fi
    if [[ "$dir" != "${NEWBS_NVRAM_DIR}"/* ]]; then
        echo >&2 "ERROR: $dir is not inside $NEWBS_NVRAM_DIR"
        return 1
    fi

    local items=( $(find "$dir" -mindepth 1 -maxdepth 1) )
    local item
    local subdirs=()
    for item in "${items[@]}"; do
        if [[ -f "$item" ]]; then
            # directly mount if it's a file or a link to a file
            mount_item "$item" "$opts"
        elif [[ -d "$item" ]]; then
            if [[ -f "$item/.dirbind" ]]; then
                # if .dirbind exists, then mount the whole directory
                mount_item "$item" "$opts"
            else
                # otherwise mount the subdir's items individually
                subdirs+=("$mdir")
            fi
        else
            echo >&2 "WARNING: unknown type for $item"
        fi
    done

    local subdir
    for subdir in "${subdirs[@]}"; do
        mount_items_in_dir "$subdir" "$opts"
    done
}

if (( $# > 0 )); then
    while (( $# > 0 )); do
        item="$(readlink -e "$item")"
        item="${item#${NEWBS_NVRAM_DIR}}"
        if [[ -e "$item" ]]; then
            mount_items_in_dir "${NEWBS_NVRAM_DIR}${item}"
        else
            echo >&2 "WARNING: $item doesn't exist"
        fi
        shift
    done
else
    mount_items_in_dir "$NEWBS_NVRAM_DIR"
fi
